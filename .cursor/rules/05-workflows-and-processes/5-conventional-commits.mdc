---
description:
  APPLY Conventional Commits format for all commit messages WHEN suggesting commits, planning
  changes, or discussing git history to ensure consistent, semantic, and automated-tool-friendly
  commit messages
globs: '**'
alwaysApply: true
---

- Check staged changes before suggesting commits
- Verify files need staging before suggesting `git add`
- Adapt commit guidance based on staging area state
- Use `type(scope): description` format
- Start with lowercase description
- Use `feat` for new features
- Use `fix` for bug fixes
- Use `docs` for documentation changes
- Use `chore` for maintenance tasks
- Use `refactor` for code restructuring
- Use `style` for formatting changes
- Use `test` for test additions
- Keep description under 50 characters
- Add body for complex changes
- Use present tense verbs
- Omit scope if obvious
- Use `!` for breaking changes
